import Mathlib.Data.Set.Basic
import Esisar.CM43

--open chap3

namespace chap7


  namespace funTypes
      section s1

        variable  {E:Type}  {F:Type}  (f : E ‚Üí F )

        def im         : Set F  := {y:F| ‚àÉx:E, y = f x}
        def injective  : Prop   := ‚àÄ u v : E, (f u = f v )  ‚Üí u = v
        def surjective : Prop   := ‚àÄ y : F, ‚àÉ x: E, f x = y

      end s1

      section s2
        open chap3
        variable  {E:Type}  {F:Type}  (f : E ‚Üí F )
        variable [Ordonne E] [Ordonne F]

        def croissante  : Prop :=  ‚àÄ u v :E , u ‚â§ v ‚Üí f u ‚â§ f v
      end s2

  end funTypes

  namespace funCond
      section s1
        variable  {E:Type} {A:Set E}  {F:Type}  {B : Set F} (f : (x:E) ‚Üí (x ‚àà A )  ‚Üí F )

        def im        : Set F := {y:F| ‚àÉx:E, ‚àÉ (hxA: x‚ààA),  y = f x hxA}
        def injective : Prop  := ‚àÄ u v :E, (huA : u‚ààA ) ‚Üí (hvA : v ‚ààA ) ‚Üí  (f u huA = f v hvA )  ‚Üí u = v
        def surjective: Prop  := ‚àÄ y ‚àà B,  ‚àÉ x: E, ‚àÉ (hxA : x‚àà A), f x hxA = y

      end s1


end funCond

  namespace funSubTypes
      section s1

        variable {E:Type} {A:Set E}  {F:Type}  {B : Set F} (f : A  ‚Üí B )

        def ofTotalFun (œÜ : E ‚Üí F) : (@Set.univ E) ‚Üí  (@Set.univ F) :=
          fun x ‚Ü¶ ‚ü®œÜ ‚Üëx , trivial‚ü©

        def ofPartialDomainFun (Œ± :A ‚Üí F) : A ‚Üí  (@Set.univ F) :=
          fun x ‚Ü¶ ‚ü®Œ± x , trivial‚ü©

        def ofPartialCodomainFun  (Œ≤:E ‚Üí B) : (@Set.univ E) ‚Üí  B :=
          fun x ‚Ü¶ Œ≤ ‚Üëx

        def cut (g:E ‚Üí F ) (x:E) [ixA:Decidable (x‚àà A)] [iyB:Decidable (g x ‚àà B)] : Option B :=
           if (x ‚àà A) then
             if hyB: (g x ‚àà B)  then
              some ‚ü®g x ,hyB ‚ü©
            else
              none
           else
            none

        def cut' (g:E ‚Üí F ) (x:E) [ixA:Decidable (x‚àà A)] [iyB:Decidable (g x ‚àà B)] : Option F :=
          Option.map (Subtype.val) ( @cut _ _ _ _ g x ixA iyB )

        theorem cut'_in_B (g:E ‚Üí F )  [iA: (x:E) ‚Üí Decidable (x‚àà A)] [iB: (y:F) ‚Üí Decidable (y ‚àà B)] :
           ‚àÄ x:E, (@cut' _ A _ B g x _ _ = none) ‚à® ‚àÉ y‚ààB,  (@cut' _ A _ B g x _ _) = (some y)
           :=
           Œª x:E ‚Ü¶
            if hxA:(x ‚àà A) then
              if hyB: (g x ‚àà B)  then
                have r : cut' g x = Option.map (Subtype.val) (cut g x) := rfl
                have : cut g x = some ‚ü®g x ,hyB ‚ü© :=
                  calc
                    cut g x = _                := if_pos hxA
                    _       = some ‚ü®g x ,hyB ‚ü© := dif_pos hyB
--                Or.inr (Exists.intro (g x) ‚ü® hyB, by unfold cut' ; rw [this] ; rfl  ‚ü© )  -- doesn't need r

                have s : cut' g x = Option.map (Subtype.val) (some ‚ü®g x ,hyB ‚ü©) := this ‚ñ∏ r
                Or.inr (Exists.intro (g x) ‚ü® hyB, s  ‚ü© )

              else
--                Or.inl (by unfold cut' ; unfold cut ; rw [if_pos hxA] ; rw [if_neg hyB] ; rfl)
--                Or.inl (by unfold cut' ; unfold cut ; rw [if_pos hxA] ; aesop)
--                Or.inl (by unfold cut' ; unfold cut ; aesop)

/-
                have :  (if hyB': g x ‚àà B then some (Subtype.mk (g x) hyB')   else none) = none :=
                  --if_neg hyB
--                  @if_neg _ _ hyB _ _ _
--                    @if_neg (g x ‚àà B) (iB (g x)) hyB (Option (Subtype B)) _ _
--                    @dif_neg (g x ‚àà B) (iB (g x)) hyB (Option (Subtype B)) _ _
                    dif_neg hyB


                have : @cut _ A _ B g x _ _ = none :=  --have : cut g x = none :=
                  calc
                    @cut _ A _ B g x _ _ = _    := if_pos hxA          -- cut g x = _    := if_pos hxA
                    _                    = none := this -- dif_neg hyB
                Or.inl ( congr_arg  (Option.map (Subtype.val)) this  )
-/

/-
                have : cut g x = none :=
                  calc
                    cut g x = _    := if_pos hxA
                    _       = none := dif_neg hyB
                Or.inl ( congr_arg  (Option.map (Subtype.val)) this  )
-/
                Or.inl (by unfold cut' ; unfold cut ; rw [if_pos hxA] ; rw [dif_neg hyB] ; rfl)

            else
              Or.inl ( congr_arg  (Option.map (Subtype.val)) (if_neg hxA)  )


        #print cut'_in_B

        def cutS (g:E ‚Üí F ) (x:A) [iyB:Decidable (g x ‚àà B)] : Option B :=
          @cut _ _ _  _ g  x.val (isTrue x.property) iyB

        def cutS' (g:E ‚Üí F ) (x:A) [iyB:Decidable (g x ‚àà B)] : Option F :=
          Option.map (Subtype.val) ( @cutS _ _ _ _ g x iyB )

        def ofFun (g:E‚ÜíF) (h : ‚àÄ x:E, x‚àà A ‚Üí g x ‚àà B ) : A ‚Üí B  :=
          fun x ‚Ü¶ ‚ü®g x , h x.val x.property‚ü©


        def injective : Prop := funTypes.injective f    -- ‚àÄ u v : ‚ÜëA , (f u = f v )  ‚Üí u = v
        def surjective: Prop := funTypes.surjective f   --  ‚àÄ y : ‚ÜëB, ‚àÉ x: ‚ÜëA, f x = y

        def im : Set F := {y:F |  ‚àÉ hyB:y‚àà B ,  (Subtype.mk y hyB) ‚àà (funTypes.im f) }
                         -- {y:F |  ‚àÉ hyB :y‚àà B ,  ‚àÉx:‚ÜëA, ‚ü®y, hyB‚ü©  = f x }

        def restriction {A':Set E} (h: A' ‚äÜ A ) : A' ‚Üí B := fun x ‚Ü¶ f ‚ü® x.val,  h x.property‚ü©

        lemma mem_im {f : A  ‚Üí B }  {x:A} : ‚Üë(f x) ‚àà im f := ‚ü® (f x).property, ‚ü®x ,rfl ‚ü© ‚ü©

        def corestriction {B':Set F} (h: B' ‚äÜ B ) (h_im : im f ‚äÜ B') : A ‚Üí B' := fun x ‚Ü¶ ‚ü® (f x).val, h_im mem_im ‚ü©

        lemma Subtype.trans {A':Set E} {x y : E} {hxA : x ‚ààA } {hyA : y ‚ààA }  {hxA':x‚àà A' } {hyA':y‚àà A' }
          (h: Subtype.mk x hxA = Subtype.mk y hyA )   :  Subtype.mk x hxA' = Subtype.mk y hyA'  :=
          Subtype.eq (congrArg Subtype.val  h : x=y)

        lemma injective_restr {A':Set E}  {h: A' ‚äÜ A} : injective f ‚Üí injective (restriction f h) :=
          Œª hfi  _ _ hreq ‚Ü¶  Subtype.trans (hfi _ _ hreq)

        def coprolongement {B':Set F} (h: B ‚äÜ B' )  : A ‚Üí B' :=
          Œª x ‚Ü¶ ‚ü® (f x).val   , h (f x).property  ‚ü©

        def eval? (x:E) [ixA: Decidable (x‚ààA)] : Option B :=
          match (ixA) with
          | isTrue hxA => some (f ‚ü® x, hxA‚ü© )
          | _          => none


        def evalD (default:B) (x:E) [Decidable (x‚ààA)] : B :=
          match (eval? f x) with
          | some y =>  y
          | none   => default

        def evalI [iB:Inhabited B] (x:E) [Decidable (x‚ààA)] : B :=
           (evalD f iB.default x)

        noncomputable def evalN [nB:Nonempty B] (x:E) [Decidable (x‚ààA)] : B :=
           (evalD f (Classical.choice nB) x)


/-
        def eval'? (x:E) [ixA: Decidable (x‚ààA)] : Option F :=
          match (ixA) with
          | isTrue hxA => some (f ‚ü® x, hxA‚ü© )
          | _          => none
-/
/-
        def eval'? (x:E) [ixA: Decidable (x‚ààA)] : Option F :=
          match (eval? f x) with
          | some y => y.val
          | _      => none
-/
        def eval'? (x:E) [Decidable (x‚ààA)] : Option F :=
          Option.map (Subtype.val) ( eval? f x )


        def eval'D (default:F) (x:E) [Decidable (x‚ààA)] : F :=
          match (eval'? f x) with
          | some y =>  y
          | none   => default

        def eval'I [iF:Inhabited F] (x:E) [Decidable (x‚ààA)] : F :=
           (eval'D f iF.default x)

        noncomputable def eval'N [nF:Nonempty F] (x:E) [Decidable (x‚ààA)] : F :=
           (eval'D f (Classical.choice nF) x)

      end s1


      lemma sq_increasing' {a b:‚Ñù} (ha: a‚â• 0) {x:‚Ñù} (hx : x ‚àà [a;b] ) : x^2 ‚àà [a^2;b^2] :=
        have hx0 : x ‚â• 0 := le_trans ha hx.left
        ‚ü®chap3.sq_increasing _ _ ha hx.left , chap3.sq_increasing _ _ hx0           hx.right ‚ü©

      def g : [1;2] ‚Üí [1;4]  := fun ‚ü® x,hx‚ü©   ‚Ü¶ ‚ü® x^2, ((
        (by norm_num : 1^2 = (1:‚Ñù )) ‚ñ∏ (by norm_num : 2^2 = (4:‚Ñù )) ‚ñ∏ (sq_increasing' (by norm_num) hx)
      ) : (x^2 ‚àà [1;4]))‚ü©

      def QPlus : Set ‚Ñö := Œª x ‚Ü¶ x ‚â• 0

      def gQ : QPlus ‚Üí QPlus  := fun ‚ü® x,hx‚ü©   ‚Ü¶ ‚ü® x^2, sq_nonneg x‚ü©

      #eval gQ ‚ü® 2, (by norm_num : (2:‚Ñö ) ‚â•0  ) ‚ü©
      #eval gQ ‚ü® 2, ((by decide ) :( (2:‚Ñö ) ‚â•0 ))‚ü©

      section s2

        variable {E:Type} [i:chap3.Ordonne E]  {A:Set E}  {F:Type}  [chap3.Ordonne F] {B : Set F} (f : A ‚Üí B )

        #print Subtype.le

        instance Subtype.instOrdonne    : chap3.Ordonne A where
          le       := (Subtype.le).le
          le_ordre := ‚ü® Œª x ‚Ü¶ i.le_ordre.1 ‚Üëx , Œª x y h1 h2 ‚Ü¶ Subtype.eq (i.le_ordre.2.1 x y h1 h2), Œª x y z ‚Ü¶  i.le_ordre.2.2 x y z‚ü©

        #check Subtype.instOrdonne

--        def croissante : Prop :=  ‚àÄ u v : A , u ‚â§ v ‚Üí f u ‚â§ f v
        def croissante : Prop :=  funTypes.croissante f

      end s2

      noncomputable def g2 : [0;+‚àû) ‚Üí [0;+‚àû)   := fun ‚ü® x,_‚ü©   ‚Ü¶ ‚ü® x^2, sq_nonneg x‚ü©

      example : croissante g2 :=
        Œª u v h ‚Ü¶
          chap3.sq_increasing u v u.property h


      namespace ex_7_1_1_2

        instance instCoeTypeSetUniv.{u} (E:Type u) : CoeDep (Type u) E (Set E) where
          coe  := @Set.univ E

        --variable {E:Type} {B: Set E}
        axiom E : Type
        axiom B : Set E

        example (X: Set E) : X ‚äÜ Set.univ := by exact Set.subset_univ X
        example (X: Set E) : X ‚à©  Set.univ = X:= by exact Set.inter_univ X
        example (X: Set E) :   Set.univ ‚à© X = X:= by exact Set.univ_inter X
        example (X: Set E) :  X ‚äÜ  X:= by exact Eq.subset rfl
        example (X: Set E) : X ‚à©  ‚àÖ  = ‚àÖ:= by exact Set.inter_empty X
        example (X: Set E) : ‚àÖ ‚äÜ X := by exact Set.empty_subset X
        example (X: Set E) : X ‚à© X  = X:= by exact Set.inter_self X
        example (X: Set E) : X ‚à© X·∂ú   = ‚àÖ := by exact Set.inter_compl_self X
        example (X: Set E) : X·∂ú ‚à© X   = ‚àÖ := by exact Set.compl_inter_self X

        def h0 : Set E ‚Üí Set E := fun X  ‚Ü¶ X ‚à© B

        def h1 : ùí´ (@Set.univ E) ‚Üí ùí´ (@Set.univ E) := fun X ‚Ü¶ ‚ü® X ‚à© B  , Set.subset_univ _ ‚ü©

        example : h0 (@Set.univ E) = B := Set.univ_inter B
        example : h1 ‚ü® @Set.univ E, Eq.subset rfl‚ü©  = B := Set.univ_inter B

        example : h0 ‚àÖ = ‚àÖ := Set.empty_inter _
        example : h1 ‚ü® ‚àÖ, Set.subset_univ _‚ü©  = (‚àÖ: Set E) := Set.empty_inter B

        example : h0 B = B := Set.inter_self _
        example : h1 ‚ü® B, Set.subset_univ _‚ü©  = B := Set.inter_self B

        example : h0 (B·∂ú)  = ‚àÖ  := Set.compl_inter_self _
        example : h1 ‚ü®B·∂ú, Set.subset_univ _‚ü©  = (‚àÖ:Set E) := Set.compl_inter_self _

      end ex_7_1_1_2

  end funSubTypes

  namespace appSets

    abbrev DecidableSubset {Œ± : Type} (a : Set Œ±) :=
      (x : Œ±) ‚Üí Decidable (x ‚àà a)

    instance instCoeTypeSetUniv.{u} (E:Type u) : CoeDep (Type u) E (Set E) where
      coe  := @Set.univ E


    structure Application  {E:Type} (A:Set E) [DecidableSubset A] {F:Type}  [i:Inhabited F]  (B : Set F) : Type where
      func : (x:E) ‚Üí (x‚àà A) ‚Üí F
      coh  : ‚àÄ x:E, (hx: x‚àà A) ‚Üí func x hx ‚àà B
/-
      eval? : E ‚Üí Option F :=
            fun (x:E) ‚Ü¶  dite (x ‚àà A)
              (fun h => Option.some (func x h)  )
              (fun _ => Option.none)
      evalD (default:F) :  E ‚Üí F :=
            fun (x:E) ‚Ü¶ match (eval? x) with
                          |  Option.some z =>  z
                          |  _             =>  default
      eval! :  E ‚Üí F :=
            evalD i.default
-/

    section s1

      variable  {E:Type} {A:Set E} [DecidableSubset A] {F:Type}  [i:Inhabited F]  {B : Set F}
      variable  (f : Application A B)

      namespace Application

      def eval? :
                              E ‚Üí Option F :=
        fun (x:E) ‚Ü¶  dite (x ‚àà A)
          (fun h => Option.some (f.func x h)  )
          (fun _ => Option.none)

      def evalD  (default:F) :  E ‚Üí F :=
              fun (x:E) ‚Ü¶ match (f.eval? x) with
                            |  Option.some z =>  z
                            |  _             =>  default

      def eval!  : E ‚Üí F :=  f.evalD i.default

      @[simp]
      def evalOfPos  (x:E) (hxA : x ‚àà A ) : f.eval! x = f.func x hxA :=

          have h0 : f.eval? x  =  some (f.func x hxA) := dif_pos hxA
          have h1 :  _ :=
          (
            calc
              f.evalD i.default x = ( match (some (f.func x hxA)) with
                          |  Option.some z =>  z
                          |  _             =>  i.default)        := h0 ‚ñ∏rfl
              _                   =  f.func x hxA                := rfl
          )

          calc
            f.eval! x  = f.evalD i.default x  := rfl
            _          = f.func x hxA         := h1


        instance instApplicationCoeFun  : CoeFun (Application A B) (Œª _ ‚Ü¶ (E ‚Üí F )) where
          coe a := a.eval!

      #print eval?

      def im : Set F := {y ‚àà B  | ‚àÉx ‚àà A , y=f x}



      def ofTotalFun
  --            (œÜ:E ‚Üí F) : @Application E (@Set.univ E) _ F _  (@Set.univ F) := {
  --            (œÜ:E ‚Üí F) : @Application  E E _  F _ F := {
  --            (œÜ:E ‚Üí F) : Application (‚ÜëE) (‚ÜëF) := {
              (œÜ:E ‚Üí F) : Application  (@Set.univ E) (@Set.univ F) := {
                func := fun  x _ ‚Ü¶ œÜ x
                coh  := Œª _ _    ‚Ü¶ trivial
              }


      def ofPartialFun  (œà:A ‚Üí B) : Application A B :=
              {
                func := fun  x hxA ‚Ü¶ (œà ‚ü®x,hxA‚ü©).val
                coh  := Œª x hxA    ‚Ü¶ (œà ‚ü®x,hxA‚ü©).property
              }

      def ofPartialDomainFun (Œ± :A ‚Üí F) : Application A  (@Set.univ F) :=
              {
                func := fun  x hxA ‚Ü¶ Œ± ‚ü®x,hxA‚ü©
                coh  := Œª _ _    ‚Ü¶ trivial
              }

      def ofPartialCodomainFun  (Œ≤:E ‚Üí B) : Application (@Set.univ E) B :=
              {
                func := fun  x _ ‚Ü¶ (Œ≤ x).val
                coh  := Œª x _    ‚Ü¶ (Œ≤ x).property
              }


      @[simp]
      lemma func_is_f (œÜ :E ‚Üí F):  (Application.ofTotalFun œÜ).eval! = œÜ   := rfl

      lemma eq :  ‚àÄ {f g : Application A B} , f.func = g.func  ‚Üí f = g
  --      | ‚ü®ffunc,fcoh‚ü© , ‚ü®.(ffunc),gcoh‚ü©, (Eq.refl ffunc) => rfl
        | ‚ü®_,_‚ü© , ‚ü®_,_‚ü©, (Eq.refl _) => rfl

      lemma eq_of_ext  (f g : Application A B):  (‚àÄ x‚àà A, f x = g x) ‚Üí f = g  :=
          Œª h ‚Ü¶
            have hf : f.func = g.func  := funext‚ÇÇ (Œª x hxA ‚Ü¶
              calc
                f.func x hxA = f.eval! x    := (f.evalOfPos x hxA).symm
                _            = g.eval! x    := h x hxA
                _            = g.func x hxA := g.evalOfPos x hxA
            )

  --          have hc : f.coh = g.coh := (Application.eq hf) ‚ñ∏ rfl

            Application.eq hf



      def id  [Inhabited E] : Application A A :=
        {
          func := Œª x _   ‚Ü¶ x
          coh  := Œª _ hxA ‚Ü¶ hxA
        }

      #print Set.Subset

      def restriction  (A':Set E) [DecidableSubset A'] (h: A' ‚äÜ A) : Application A' B :=
            {
              func := Œª x hxA' ‚Ü¶ f.func x (h  hxA')
              coh  := Œª x _    ‚Ü¶ f.coh x _
            }

      lemma restriction_eq  (A':Set E) [DecidableSubset A'] (h: A' ‚äÜ A) :
              ‚àÄ x‚ààA',  (restriction f A' h) x = f x
              :=
              let r:= restriction f A' h
              Œª x hxA' ‚Ü¶
                have hxA : x ‚àà A := h hxA'
                calc
                  r x = f.func x _ := evalOfPos _ x hxA'
                  _   = f x        := (evalOfPos _ x hxA).symm


      def corestriction (B':Set F)  (h:  B' ‚äÜ B)  (h_im : im f ‚äÜ B' ) : Application A B' :=
            {
              func := f.func
              coh  := Œª x hxA  ‚Ü¶  h_im (And.intro (f.coh x _) (
                Exists.intro x (
                  And.intro
                    hxA
                    (evalOfPos _ x hxA).symm
                )
              ))
            }

      def coprolongement (B':Set F)  (h: B ‚äÜ B') : Application A B' :=
            {
              func := f.func
              coh  := Œª x _  ‚Ü¶  h (f.coh x _)
            }

      def injective : Prop  := ‚àÄ u‚ààA, ‚àÄ v‚ààA, (f u = f v )  ‚Üí u = v
      def surjective : Prop := ‚àÄ y‚ààB, ‚àÉ x‚àà A, f x = y


      lemma injective_restr (A':Set E) [DecidableSubset A'] (h: A' ‚äÜ A) :
              injective f ‚Üí injective ( restriction f A' h)
              :=
              Œª hi ‚Ü¶
                Œª u huA' v hvA' hreq ‚Ü¶
                  let r:= restriction f A' h
                  have hfeq : f u = f v :=
                    calc
                      f u = r u  := (restriction_eq _ _ _ u huA').symm
                      _   = r v  := hreq
                      _   = f v  := restriction_eq _ _ _ v hvA'

                  hi _ (h huA') _ (h hvA')  hfeq
      end Application

    end s1



    #check chap3.sq_increasing

    section testDecidable
      #synth DecidableSubset [1;2]

      variable (x:‚Ñù)
      #synth Decidable (x ‚â• 1 ‚àß x ‚â§ 2 )
      #synth Decidable (x ‚â• 1 )
    end testDecidable

    noncomputable def g : Application [1;2] [1;4] :=
    {
      func := fun x hx ‚Ü¶ x^2
      coh  := Œª x   hx ‚Ü¶
         have hx0 : x ‚â• 0 := le_trans (by norm_num) hx.left
        ‚ü® trans (chap3.sq_increasing _ _ (by norm_num) hx.left)  (by norm_num),
          trans (chap3.sq_increasing _ _ hx0           hx.right) (by norm_num : 2^2 = (4:‚Ñù))‚ü©
    }

    noncomputable def g2 : Application  [0;+‚àû)   [0;+‚àû)  :=
    {
      func := fun x _ ‚Ü¶ x^2
      coh  := Œª x   _ ‚Ü¶ sq_nonneg x
    }

    section s2

      open chap3

      variable  {E:Type} {A:Set E} [DecidableSubset A] {F:Type}  [i:Inhabited F]  {B : Set F}
      variable [o:Ordonne E] [Ordonne F]

      instance Subtype.instOrdonne   : Ordonne A where
        le       := (Subtype.le).le
        le_ordre := ‚ü® Œª x ‚Ü¶ o.le_ordre.1 ‚Üëx , Œª x y h1 h2 ‚Ü¶ Subtype.eq (o.le_ordre.2.1 x y h1 h2), Œª x y z ‚Ü¶  o.le_ordre.2.2 x y z‚ü©

      #check Subtype.instOrdonne

      def croissante (f : Application A B ) : Prop  := ‚àÄ u‚ààA, ‚àÄ v‚ààA , u ‚â§ v ‚Üí f u ‚â§ f v

      example : croissante g2 :=
        Œª u hu v  hv h ‚Ü¶
          calc
            g2 u = u^2      := g2.evalOfPos  _ hu
            _        ‚â§ v^2  := sq_increasing u v hu h
            _        = g2 v := (g2.evalOfPos _ hv).symm

    end s2


  end appSets

end chap7
